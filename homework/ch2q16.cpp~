#include <iostream>
using namespace std;

typedef long IntType;

class Rational
{

public:
  //Constructors
  Rational( const IntType & numerator = 0)
    : numer(numerator), denom( 1 ) { }
  Rational( const IntType & numerator, const IntType & denominator)
    :numer(numerator), denom(denominator) { fixSigns(); reduce(); }
  Rational( const Rational & rhs)
    :numer(rhs.numer), denom( rhs.denom ) { }


  //Destructor
  ~Rational() {}

  //Assignment Ops 
  const Rational & operator= ( const Rational & rhs);
  const Rational & operator+=( const Rational & rhs);
  const Rational & operator-=( const Rational & rhs);
  const Rational & operator/=( const Rational & rhs);
  const Rational & operator*=( const Rational & rhs);

  //Math Binary Ops 
  Rational operator+( const Rational & rhs) const;
  Rational operator-( const Rational & rhs) const;
  Rational operator/( const Rational & rhs) const;
  Rational operator*( const Rational & rhs) const;

  //Relational & Equality Ops
  bool operator< ( const Rational & rhs) const;
  bool operator<= (const Rational & rhs) const;
  bool operator> (const Rational & rhs) const;
  bool operator>= (const Rational & rhs) const;
  bool operator== (const Rational & rhs) const;
  bool operator!= (const Rational & rhs) const;

  //Unary operators
  const Rational & operator++();
  Rational operator++(int );
  const Rational & operator--( );
  Rational operator--( int );
  const Rational & operator+( ) const;
  Rational operator-( ) const;
  bool operator!() const;

  //Member Function
  double toDouble( ) const
  { return static_cast<double>( numer) / denom; }

  //I/O friends: privacy is waived
  friend ostream & operator<<( ostream & out, const Rational & value);
  
  friend istream & operator>>( istream & in, Rational & value);

private:
  //A rational number is represented by a numerator and 
  // denominator in reduced form
  IntType numer;
  IntType denom;
  
  void fixSigns( );
  void reduce( );

};

void Rational::fixSigns( )
{

  if( denom < 0 )
    {
      denom = -denom;
      numer = -numer;
    }

}

void Rational::reduce( )
{

  IntType d = 1;
  
  if( denom != 0 && numer != 0)
    d = gcd( numer, denom);

  if( d > 1 )
    {
      numer /= d;
      denom /= d;
    }
}

